from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd
import datetime


all_nums = '''5 724
5 775
5 779
5 798
5 856
5 869
5 968
6 078
6 087
6 100
6 118
6 119
6 120
6 179
6 201
6 202
6 205
6 206
6 207
6 217
6 218
6 220
6 229
6 231
6 232
6 233
6 234
6 236
6 238
6 244
6 245
6 247
6 248
6 249
6 250
6 256
6 257
6 258
6 259
6 260
6 261
6 262
6 263
6 264
6 265
6 266
6 270
6 271
6 272
6 279
6 280
6 281
6 282
6 283
6 284
6 285
6 296
6 300
6 302
6 304
6 309
6 311
6 312
6 313
6 314
6 316
6 317
6 324
6 329
6 338
6 339
6 341
6 343
6 347
6 349
6 350
6 351
6 352
6 353
6 354
6 355
6 356
6 357
6 358
6 359
6 360
6 361
6 362
6 363
6 364
6 365
6 366
6 367
6 368
6 369
6 370
6 371
6 372
6 373
6 374
6 377
6 378
6 379
6 380
6 381
6 382
6 383
6 384
6 385
6 386
6 387
6 388
6 389
6 390
6 391
6 392
6 398
6 399
6 400
6 401
6 402
6 403
6 406
6 407
6 408
6 409
6 411
6 412
6 413
6 414
6 415
6 416
6 417
6 418
6 421
6 422
6 423
6 424
6 425
6 426
6 427
6 428
6 429
6 430
6 431
6 437
6 438
6 439
6 440
6 441
6 442
6 443
6 444
6 445
6 446
6 447
6 450
6 451
6 452
6 453
6 454
6 455
6 456
6 457
6 458
6 459
6 460
6 461
6 462
6 463
6 464
6 465
6 466
6 467
6 468
6 469
6 470
6 471
6 472
6 473
6 474
6 475
6 476
6 478
6 479
6 480
6 481
6 482
6 483
6 484
6 485
6 486
6 487
6 488
6 489
6 490
6 491
6 492
6 493
6 494
6 495
6 496
6 497
6 498
6 499
6 500
6 507
6 510
6 511
6 512
6 513
6 518
6 520
6 521
6 522
6 523
6 524
6 525
6 526
6 527
6 528
6 530
6 534
6 535
6 536
6 537
6 538
6 545
6 546
6 547
6 548
6 552
6 555
6 558
6 559
6 560
6 561
6 562
6 563
6 564
6 565
6 566
6 567
6 568
6 569
6 570
6 571
6 572
6 573
6 576
6 577
6 578
6 579
6 580
6 581
6 582
6 583
6 584
6 585
6 586
6 587
6 588
6 589
6 590
6 591
6 592
6 593
6 594
6 595
6 596
6 597
6 598
6 599
6 600
6 601
6 602
6 603
6 604
6 605
6 606
6 607
6 608
6 609
6 610
6 611
6 612
6 613
6 614
6 615
6 616
6 617
6 618
6 619
6 620
6 621
6 622
6 624
6 642
6 643
6 644
6 645
6 646
6 648
6 650
6 651
6 652
6 653
6 654
6 655
6 656
6 657
6 658
6 659
6 660
6 661
6 662
6 663
6 664
6 665
6 666
6 667
6 668
6 669
6 670
6 671
6 672
6 673
6 674
6 675
6 676
6 677
6 678
6 679
6 680
6 681
6 682
6 683
6 684
6 685
6 686
6 687
6 689
6 690
6 691
6 692
6 694
6 695
6 696
6 697
6 698
6 699
6 700
6 701
6 702
6 703
6 704
6 705
6 706
6 707
6 708
6 709
6 710
6 712
6 713
6 714
6 715
6 717
6 718
6 719
6 720
6 721
6 722
6 724
6 725
6 728
6 729
6 730
6 731
6 732
6 733
6 734
6 735
6 737
6 738
6 739
6 740
6 741
6 742
6 743
6 744
6 745
6 746
6 747
6 748
6 749
6 750
6 751
6 752
6 753
6 754
6 755
6 756
6 757
6 758
6 759
6 760
6 761
6 762
6 763
6 765
6 766
6 767
6 768
6 769
6 770
6 771
6 772
6 776
6 777
6 778
6 779
6 780
6 782
6 783
6 784
6 785
6 787
6 788
6 789
6 790
6 791
6 794
6 795
6 796
6 797
6 798
6 799
6 800
6 801
6 802
6 803
6 804
6 805
6 806
6 807
6 808
6 809
6 810
6 811
6 812
6 813
6 815
6 816
6 817
6 818
6 819
6 820
6 821
6 822
6 827
6 828
6 829
6 831
6 834
6 835
6 836
6 837
6 838
6 841
6 842
6 845
6 846
6 847
6 848
6 849
6 850
6 851
6 852
6 853
6 854
6 855
6 856
6 857
6 858
6 859
6 860
6 861
6 862
6 863
6 864
6 865
6 866
6 867
6 868
6 869
6 870
6 871
6 872
6 873
6 874
6 875
6 876
6 877
6 878
6 879
6 880
6 881
6 882
6 883
6 884
6 885
6 886
6 887
6 888
6 889
6 890
6 891
6 892
6 893
6 894
6 895
6 896
6 897
6 898
6 899
6 900
6 901
6 902
6 903
6 904
6 905
6 906
6 907
6 908
6 910
6 911
6 914
6 915
6 916
6 917
6 918
6 919
6 920
6 921
6 922
6 923
6 924
6 925
6 926
6 927
6 928
6 929
6 930
6 931
6 932
6 933
6 934
6 935
6 936
6 937
6 938
6 939
6 940
6 941
6 942
6 943
6 944
6 945
6 946
6 947
6 948
6 949
6 950
6 952
6 953
6 954
6 955
6 956
6 957
6 958
6 959
6 960
6 961
6 962
6 963
6 964
6 965
6 966
6 967
6 968
6 969
6 970
6 971
6 972
6 973
6 974
6 975
6 976
6 977
6 978
6 979
6 980
6 981
6 982
6 983
6 984
6 985
6 986
6 988
6 989
6 990
6 992
6 993
6 994
6 995
6 996
6 997
6 998
6 999
7 000
7 001
7 002
7 004
7 005
7 006
7 007
7 008
7 009
7 016
7 017
7 018
7 020
7 021
7 022
7 023
7 024
7 025
7 026
7 027
7 028
7 029
7 030
7 031
7 032
7 033
7 034
7 035
7 036
7 037
7 038
7 039
7 040
7 041
7 042
7 043
7 044
7 045
7 046
7 047
7 048
7 049
7 050
7 051
7 052
7 053
7 054
7 055
7 056
7 057
7 058
7 059
7 060
7 061
7 062
7 063
7 064
7 065
7 066
7 068
7 069
7 070
7 071
7 072
7 073
7 074
7 075
7 076
7 077
7 078
7 079
7 080
7 081
7 082
7 083
7 084
7 085
7 086
7 087
7 088
7 089
7 090
7 091
7 092
7 093
7 094
7 095
7 096
7 097
7 098
7 099
7 100
7 101
7 102
7 103
7 104
7 105
7 106
7 107
7 108
7 109
7 110
7 111
7 112
7 113
7 115
7 116
7 117
7 118
7 119
7 120
7 121
7 122
7 123
7 124
7 125
7 126
7 127
7 128
7 129
7 130
7 131
7 132
7 133
7 134
7 135
7 136
7 137
7 138
7 139
7 140
7 141
7 142
7 143
7 144
7 145
7 146
7 147
7 148
7 149
7 150
7 151
7 153
7 154
7 155
7 156
7 158
7 159
7 160
7 161
7 162
7 163
7 164
7 165
7 166
7 167
7 168
7 169
7 170
7 171
7 172
7 173
7 174
7 175
7 176
7 177
7 178
7 179
7 181
7 182
7 183
7 184
7 186
7 187
7 188
7 189
7 190
7 191
7 192
7 193
7 194
7 195
7 197
7 198
7 199
7 200
7 201
7 202
7 203
7 204
7 205
7 206
7 207
7 208
7 209
7 210
7 211
7 212
7 213
7 214
7 215
7 216
7 220
7 221
7 223
7 224
7 225
7 227
7 228
7 229
7 231
7 232
7 233
7 234
7 235
7 236
7 238
7 239
7 240
7 242
7 244
7 245
7 246
7 247
7 248
7 249
7 250
7 251
7 252
7 253
7 255
7 256
7 257
7 258
7 260
7 261
7 262
7 263
7 264
7 265
7 266
7 267
7 268
7 269
7 270
7 271
7 272
7 273
7 274
7 275
7 276
7 277
7 278
7 279
7 280
7 281
7 283
7 284
7 285
7 286
7 287
7 288
7 289
7 290
7 291
7 292
7 293
7 294
7 296
7 297
7 298
7 299
7 300
7 301
7 302
7 303
7 304
7 305
7 306
7 307
7 308
7 310
7 311
7 312
7 313
7 314
7 315
7 316
7 318
7 320
7 321
7 322
7 323
7 324
7 327
7 328
7 330
7 331
7 332
7 333
7 334
7 335
7 336
7 337
7 338
7 339
7 340
7 341
7 342
7 343
7 345
7 346
7 347
7 348
7 350
7 351
7 352
7 353
7 354
7 355
7 356
7 357
7 359
7 360
7 361
7 363
7 364
7 366
7 367
7 368
7 369
7 370
7 371
7 372
7 373
7 374
7 375
7 376
7 377
7 378
7 379
7 380
7 381
7 382
7 383
7 384
7 385
7 386
7 387
7 388
7 389
7 391
7 392
7 393
7 394
7 395
7 397
7 398
7 399
7 400
7 401
7 402
7 403
7 404
7 405
7 406
7 407
7 408
7 409
7 410
7 411
7 412
7 413
7 415
7 416
7 418
7 419
7 420
7 421
7 422
7 423
7 424
7 425
7 426
7 427
7 428
7 429
7 430
7 431
7 432
7 433
7 435
7 436
7 437
7 438
7 439
7 440
7 441
7 442
7 443
7 444
7 445
7 446
7 447
7 448
7 449
7 450
7 451
7 453
7 455
7 456
7 457
7 459
7 460
7 461
7 462
7 463
7 464
7 465
7 466
7 467
7 468
7 469
7 470
7 471
7 472
7 473
7 474
7 475
7 476
7 477
7 478
7 479
7 480
7 481
7 482
7 483
7 484
7 485
7 486
7 487
7 488
7 489
7 490
7 491
7 492
7 493
7 494
7 495
7 497
7 498
7 500
7 501
7 505
7 506
7 507
7 508
7 509
7 511
7 512
7 513
7 514
7 515
7 516
7 517
7 518
7 519
7 521
7 522
7 523
7 524
7 525
7 526
7 527
7 528
7 529
7 530
7 531
7 532
7 534
7 535
7 536
7 537
7 538
7 539
7 540
7 541
7 542
7 543
7 544
7 545
7 546
7 547
7 548
7 549
7 550
7 551
7 553
7 554
7 555
7 556
7 557
7 558
7 559
7 561
7 562
7 563
7 564
7 565
7 566
7 567
7 568
7 569
7 570
7 572
7 573
7 574
7 575
7 576
7 577
7 578
7 579
7 580
7 581
7 582
7 583
7 585
7 586
7 587
7 589
7 590
7 591
7 592
7 593
7 594
7 595
7 596
7 597
7 598
7 599
7 600
7 602
7 603
7 605
7 608
7 609
7 610
7 611
7 612
7 613
7 614
7 615
7 616
7 618
7 621
7 622
7 623
7 624
7 625
7 626
7 628
7 629
7 632
7 634
7 635
7 636
7 637
7 638
7 639
7 640
7 642
7 643
7 644
7 645
7 646
7 647
7 648
7 649
7 650
7 651
7 652
7 653
7 655
7 656
7 657
7 658
7 660
7 661
7 662
7 663
7 665
7 666
7 667
7 669
7 670
7 671
7 672
7 673
7 674
7 675
7 676
7 679
7 682
7 683
7 684
7 685
7 686
7 687
7 688
7 691
7 692
7 693
7 694
7 695
7 696
7 697
7 699
7 700
7 701
7 702
7 703
7 704
7 705
7 706
7 707
7 708
7 709
7 710
7 711
7 712
7 713
7 714
7 715
7 716
7 717
7 718
7 719
7 720
7 721
7 722
7 723
7 724
7 725
7 727
7 728
7 729
7 730
7 731
7 732
7 733
7 734
7 736
7 737
7 738
7 739
7 740
7 741
7 742
7 743
7 744
7 745
7 746
7 747
7 748
7 749
7 750
7 751
7 752
7 753
7 754
7 755
7 756
7 757
7 758
7 759
7 760
7 761
7 762
7 763
7 764
7 765
7 766
7 767
7 769
7 770
7 771
7 772
7 773
7 774
7 775
7 776
7 777
7 779
7 780
7 781
7 783
7 785
7 786
7 787
7 788
7 789
7 790
7 791
7 793
7 794
7 795
7 796
7 797
7 798
7 799
7 800
7 801
7 802
7 803
7 804
7 805
7 806
7 807
7 808
7 809
7 810
7 811
7 812
7 813
7 814
7 815
7 816
7 817
7 818
7 819
7 820
7 821
7 822
7 823
7 824
7 825
7 826
7 827
7 828
7 829
7 830
7 831
7 833
7 834
7 835
7 836
7 837
7 838
7 839
7 840
7 842
7 843
7 844
7 845
7 846
7 847
7 848
7 849
7 850
7 851
7 852
7 853
7 854
7 855
7 856
7 857
7 858
7 859
7 860
7 861
7 862
7 863
7 864
7 865
7 866
7 867
7 868
7 869
7 870
7 871
7 872
7 873
7 874
7 876
7 877
7 878
7 879
7 880
7 881
7 882
7 883
7 884
7 885
7 886
7 887
7 888
7 889
7 890
7 891
7 892
7 893
7 894
7 895
7 896
7 897
7 898
7 899
7 900
7 901
7 902
7 903
7 904
7 905
7 906
7 907
7 908
7 909
7 910
7 911
7 912
7 913
7 915
7 916
7 917
7 918
7 919
7 920
7 921
7 924
7 925
7 926
7 927
7 928
7 929
7 930
7 931
7 932
7 933
7 934
7 935
7 936
7 937
7 938
7 939
7 940
7 941
7 944
7 945
7 946
7 947
7 948
7 949
7 950
7 951
7 952
7 953
7 954
7 955
7 956
7 957
7 958
7 959
7 960
7 961
7 962
7 963
7 964
7 965
7 966
7 967
7 968
7 969
7 970
7 971
7 972
7 973
7 974
7 975
7 976
7 977
7 978
7 979
7 980
7 981
7 982
7 983
7 984
7 985
7 986
7 987
7 988
7 989
7 990
7 991
7 992
7 993
7 994
7 995
7 996
7 997
7 998
7 999
8 000
8 001
8 002
8 003
8 004
8 005
8 006
8 007
8 009
8 010
8 011
8 012
8 013
8 014
8 015
8 016
8 017
8 018
8 019
8 020
8 021
8 022
8 023
8 024
8 025
8 026
8 027
8 028
8 029
8 030
8 031
8 032
8 033
8 034
8 035
8 036
8 037
8 038
8 039
8 040
8 041
8 042
8 043
8 044
8 045
8 046
8 047
8 048
8 049
8 050
8 051
8 052
8 053
8 054
8 055
8 057
8 058
8 059
8 060
8 061
8 062
8 063
8 064
8 065
8 068
8 069
8 070
8 071
8 072
8 073
8 074
8 075
8 076
8 077
8 078
8 079
8 080
8 081
8 082
8 083
8 084
8 085
8 086
8 087
8 088
8 089
8 090
8 091
8 092
8 093
8 094
8 095
8 096
8 097
8 098
8 099
8 100
8 103
8 104
8 105
8 106
8 107
8 108
8 109
8 110
8 111
8 112
8 113
8 114
8 115
8 116
8 117
8 118
8 119
8 120
8 121
8 122
8 124
8 125
8 126
8 127
8 128
8 129
8 130
8 131
8 132
8 133
8 134
8 135
8 136
8 137
8 138
8 139
8 140
8 141
8 142
8 143
8 144
8 145
8 146
8 147
8 148
8 149
8 150
8 151
8 152
8 153
8 154
8 155
8 156
8 157
8 158
8 159
8 160
8 161
8 162
8 163
8 164
8 165
8 166
8 167
8 168
8 169
8 170
8 171
8 172
8 173
8 174
8 175
8 176
8 177
8 178
8 179
8 180
8 181
8 182
8 183
8 184
8 185
8 186
8 187
8 188
8 189
8 190
8 191
8 192
8 193
8 194
8 195
8 196
8 197
8 198
8 199
8 200
8 201
8 202
8 203
8 204
8 205
8 206
8 207
8 208
8 209
8 210
8 211
8 212
8 213
8 215
8 216
8 218
8 219
8 221
8 222
8 223
8 224
8 225
8 226
8 227
8 228
8 229
8 230
8 231
8 232
8 233
8 234
8 235
8 236
8 237
8 238
8 239
8 240
8 241
8 242
8 249
8 250
8 251
8 255
8 256
8 257
8 258
8 259
8 260
8 261
8 262
8 263
8 264
8 265
8 266
8 267
8 268
8 269
8 270
8 271
8 272
8 273
8 274
8 275
8 276
8 279
8 280
8 281
8 282
8 283
8 284
8 285
8 286
8 287
8 288
8 289
8 290
8 291
8 292
8 293
8 294
8 295
8 296
8 297
8 298
8 299
8 300
8 301
8 302
8 303
8 304
8 305
8 306
8 307
8 308
8 309
8 310
8 311
8 312
8 313
8 314
8 315
8 316
8 317
8 318
8 319
8 320
8 321
8 322
8 323
8 324
8 325
8 327
8 330
8 331
8 332
8 333
8 334
8 335
8 336
8 337
8 338
8 339
8 341
8 342
8 343
8 344
8 345
8 346
8 347
8 348
8 349
8 350
8 351
8 352
8 353
8 354
8 355
8 356
8 357
8 359
8 360
8 361
8 362
8 363
8 364
8 365
8 366
8 367
8 368
8 369
8 370
8 371
8 372
8 373
8 374
8 379
8 380
8 381
8 382
8 383
8 384
8 385
8 386
8 387
8 388
8 389
8 390
8 391
8 392
8 393
8 394
8 395
8 396
8 397
8 399
8 401
8 402
8 403
8 404
8 405
8 406
8 407
8 408
8 409
8 410
8 411
8 412
8 413
8 414
8 415
8 417
8 418
8 419
8 420
8 421
8 422
8 423
8 424
8 425
8 426
8 427
8 428
8 429
8 431
8 433
8 434
8 435
8 436
8 437
8 438
8 439
8 440
8 441
8 442
8 443
8 444
8 445
8 446
8 447
8 448
8 449
8 450
8 451
8 452
8 453
8 454
8 456
8 457
8 458
8 459
8 460
8 461
8 462
8 463
8 464
8 465
8 466
8 467
8 468
8 469
8 470
8 471
8 472
8 473
8 474
8 475
8 476
8 477
8 478
8 479
8 480
8 481
8 482
8 483
8 484
8 485
8 486
8 487
8 488
8 489
8 491
8 492
8 496
8 497
8 498
8 499
8 500
8 501
8 502
8 503
8 504
8 505
8 506
8 507
8 508
8 512
8 513
8 514
8 515
8 517
8 518
8 519
8 523
8 528
8 529
8 530
8 531
8 532
8 534
8 535
8 536
8 537
8 538
8 539
8 540
8 541
8 542
8 543
8 544
8 546
8 551
8 553
8 554
8 555
8 558
8 559
8 562
8 563
8 564
8 566
8 567
8 569
8 570
8 571
8 573
8 574
8 575
8 576
8 577
8 578
8 579
8 580
8 581
8 582
8 584
8 587
8 590
8 592
8 593
8 594
8 597
8 598
8 599
8 600
8 601
8 602
8 604
8 605
8 606
8 607
8 608
8 611
8 625
8 626
8 627
8 628
8 629
8 630
8 637
8 638
8 639
8 642
8 645
8 647
8 651
8 654
8 655
8 657
8 664
8 667
8 668
8 670
8 671
8 672
8 673
8 674
8 679'''.split('\n')


qwertyuioppp = {'2': 1.2539762130145053, '3': 1.1475490733064986, '4': 1.5121249570824162, '5': 2.207941689415046, '6': 0.898730607399206, '7': 0.6694601010634513, '8': 0.6726971500693275, '9': 0.6377506734762193, '10': 0.6363641661366979, '11': 1.794963718360388, '12': 3.0083183069059074, '14': 1.7799751067318468, '15': 0.42491548956695874, '16': 1.3376569242151033, '17': 1.5022955781808076, '18': 0.732890683481525, '19': 1.497545902697919, '20': 0.5488323140290974, '21': 0.9922088986957144, '23': 0.5671651273210555, '24': 2.1195640957551647, '26': 1.1271941100380682}
# qwertyuioppp = {'2': 46.0, '3': 43.0, '4': 43.0, '5': 42.0, '6': 37.0, '7': 31.0, '8': 41.0, '9': 48.0, '10': 20.0, '11': 6.0, '12': 40.0, '14': 43.0, '15': 43.0, '16': 41.0, '17': 
# 47.0, '18': 38.0, '19': 40.0, '20': 48.0, '21': 48.0, '23': 22.0, '24': 29.0, '26': 19.0}

preferable = []
unpreferable = []


def show_data(idcmp):
    mmm = cmp[cmp['id'].astype(str).str.contains(idcmp, case=False, na=False)]
    charity_ids = cmp[cmp['id'].astype(str).str.contains(idcmp, case=False, na=False)]
    regions = charit[charit['id'].astype(str) == str(charity_ids['charity_id'].tolist()[0])]
    all_activity = comms[comms['campaign_id'].astype(str).str.contains(idcmp, case=False, na=False)]
    published_at = convert_date(str(mmm['published_at'].tolist()[0]))
    if str(mmm['finished_at'].tolist()[0]) != 'nan':
        finished_at = convert_date(str(mmm['finished_at'].tolist()[0]))
    else:
        finished_at = 'nan'

    all = {
        'idkw':     kw[kw['campaign_id'].astype(str).str.contains(idcmp, case=False, na=False)]['keyword_id'].tolist(),
        'idchr':    cmp[cmp['id'].astype(str).str.contains(idcmp, case=False, na=False)]['charity_id'].tolist()[0],
        'idrg':     charit[charit['id'].astype(str) == str(charity_ids['charity_id'].tolist()[0])]['region_id'].tolist()[0],
        'cntsubs':  int(''.join(regions['subscribers_count'].tolist()[0].split())),
        'alllks':   sum(comms[comms['campaign_id'].astype(str).str.contains(idcmp, case=False, na=False)]['likes_count'].tolist()),
        'allcmnts': len(comms[comms['campaign_id'].astype(str).str.contains(idcmp, case=False, na=False)]['likes_count'].tolist()),
        'idcmp':    int(''.join(str(mmm['id'].tolist()[0]).split())),
        'hashtag':  str(mmm['hashtag'].tolist()[0]),
        'goal':     int(''.join(str(mmm['goal'].tolist()[0]).split())),
        'strt':     cmp[cmp['id'].astype(str).str.contains(idcmp, case=False, na=False)]['published_at'].tolist()[0],
        'fnsh':     cmp[cmp['id'].astype(str).str.contains(idcmp, case=False, na=False)]['finished_at'].tolist()[0],
        'cllctd':   int(''.join(str(mmm['collected'].tolist()[0]).split())),
        'usrcnt':   int(''.join(str(mmm['user_count'].tolist()[0]).split())),
        'status':   int(str(mmm['status'].tolist()[0])),
        'allhlps':  int(''.join(str(mmm['help_receiver_count'].tolist()[0]).split())),
        'allvwrs':  int(''.join(str(mmm['link_open_event_count'].tolist()[0]).split())),
        'title':    str(mmm['title'].tolist()[0]),
        'dscrptn':  str(mmm['description'].tolist()[0])
    }
    if all['fnsh'] != 'nan' and type(all['fnsh']) is str:
        all['allss'] = (int(''.join(str(mmm['collected'].tolist()[0]).split())) / all['goal'] / (int((finished_at - published_at).total_seconds() // 86400) + 1)) * 100 // 1
    else:
        all['allss'] = (int(''.join(str(mmm['collected'].tolist()[0]).split())) / all['goal'] / (int((datetime.datetime.now() - published_at).total_seconds() // 86400)+1))*100
    return all

def convert_date(date_str):
    months = {
        'Январь': '01',
        'Февраль': '02',
        'Март': '03',
        'Апрель': '04',
        'Май': '05',
        'Июнь': '06',
        'Июль': '07',
        'Август': '08',
        'Сентябрь': '09',
        'Октябрь': '10',
        'Ноябрь': '11',
        'Декабрь': '12'
    }
    date_str = date_str.split(', ')
    return datetime.datetime(int(date_str[1]), int(months[date_str[0].split()[1]]), int(date_str[0].split()[0]), int(date_str[2].split(':')[0]), int(date_str[2].split(':')[1]))
cash = pd.read_csv('all/payments.csv', sep=';')
kw = pd.read_csv('all/keywords.csv', sep=';')
cmp = pd.read_csv('all/campaigns.csv', sep=';')
charit = pd.read_csv('all/charities.csv', sep=';')
comms = pd.read_csv('all/comments.csv', sep=';')
comlikes = pd.read_csv('all/commentlikes.csv', sep=';')

# print(show_data('6 720')['allss'])


# print(preferable)
# print(unpreferable)

# for i in all_nums:
#     zxc = show_data(i)
#     if(zxc['status'] == 4):
#         for i in zxc['idkw']:
#             qwertyuiop[str(i)] += 1
#             qwertyuiopp[str(i)] += zxc['allss']
# for i in list(qwertyuiop.keys()):
#     qwertyuioppp[i] = qwertyuiopp[i] / qwertyuiop[i]
# print(qwertyuioppp)
# print(qwertyuiop)
# print(qwertyuiopp)




# Запросите у пользователя данные для поиска
while True:
    search_data = input("Введите данные для поиска: ")
#     campaign_data = input("ZXC: ")

#     # Преобразуйте данные в строку для поиска
    search_str = str(search_data)
#     campaign_data = str(campaign_data)

#     print(type(show_data(campaign_data)['fnsh']) is str)
#     print(type(show_data(campaign_data)['strt']))
    
    # Найдите строки, в которых столбец user_id содержит искомые данные
    result = cash[cash['user_id'].astype(str).str.contains(search_str, case=False, na=False)]

    # Выведите результаты поиска 

        
    # print("Найдены следующие строки:")
    # print(result)

    campaign_ids = result['campaign_id'].tolist()
    kw_stat = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    charity_stats = []
    for z in range(157):
        charity_stats.append(0)
    region_stats = []
    for z in range(51):
        region_stats.append(0)
    for i in campaign_ids:
        result_kw = kw[kw['campaign_id'].astype(str).str.contains(i, case=False, na=False)]
        for j in result_kw['keyword_id'].tolist():
            kw_stat[int(j)] += 1

    # print(kw_stat)
    

        charity_ids = cmp[cmp['id'].astype(str).str.contains(i, case=False, na=False)]
        # print(int(charity_ids['charity_id'].tolist()[0]))
        charity_stats[int(charity_ids['charity_id'].tolist()[0]) - 1] += 1
    
    # print(charity_stats)
    
        regions = charit[charit['id'].astype(str) == str(charity_ids['charity_id'].tolist()[0])]
        region_stats[int(regions['region_id'].tolist()[0])] += 1
    # print(region_stats)
    sum_kw_stats = sum(kw_stat)    
    sum_charity_stats = sum(charity_stats)
    sum_reg_stats = sum(region_stats)
    score_kw = 0
    # print(kw_stat)

    for i in range(28):
        score_kw += 1/(kw_stat[i-1]+1)
    score_kw -= 6
    score_charity = 0
    for i in range(157):
        score_charity += 1/(charity_stats[i]+1)
    score_region = 0
    for i in range(51):
        score_region += 1/(region_stats[i]+1)
    score_region -= 11
    if (score_kw >= (2*(len(kw_stat)-6)/(sum_kw_stats/(len(kw_stat)-6))) or score_charity >= (2*(len(charity_stats))/(sum_charity_stats / (len(charity_stats)))) or score_region >= (2*(len(region_stats) - 11)/(sum_reg_stats / (len(region_stats) - 11)))):
        print(228)
        qual_camp = []
        for i in all_nums:
            zxc = show_data(i)
            qual_camp1 = [0, 0]
            
            if zxc['status'] == 4:
                qual_camp1 = [0, 0]
                qual_camp1[1] = int(i[0] + i[2:])
                opo = zxc['idkw']
                for lk in opo:
                    qual_camp1[0] += kw_stat[lk]
            qual_camp.append(qual_camp1)
        # qual_camp_dv = []
        # for i in len(qual_camp):
        #     qual_camp_
        qual_camp.sort()
        qual_camp = qual_camp[::-1]

        recommendations_teg = []
        for dfg in qual_camp:
            if dfg[1] == 0:
                break
            recommendations_teg.append(dfg[1])
        print(recommendations_teg)

    else:
        donations = pd.read_csv('all/campaigns.csv', sep=';')
        donations['description'] = donations['description'].fillna('')

        # Векторизация текстовых данных
        vectorizer = TfidfVectorizer()
        vectors = vectorizer.fit_transform(donations['description'])

        # Обучение модели
        similarity_matrix = cosine_similarity(vectors)

        # Выдача рекомендаций
        def get_recommendations(donation_id, num_recommendations):
            similarity_scores = similarity_matrix[donation_id]
            top_scores = sorted(enumerate(similarity_scores), key=lambda x: x[1], reverse=True)[1: num_recommendations + 1]
            top_ids = [i[0] for i in top_scores]
            return top_ids

        # Пример использования
        donation_id = campaign_ids[-1]
        donation_id = all_nums.index(donation_id)
        num_recommendations = 100
        recommendations_ai = get_recommendations(donation_id, num_recommendations)
        recommendations_ai2 = []
        for i in recommendations_ai:
            recommendations_ai2.append(all_nums[i])
        print(recommendations_ai2)
        
    



    # часть аи

    # donations = pd.read_csv('all/campaigns.csv', sep=';')
    # donations['description'] = donations['description'].fillna('')

    # # Векторизация текстовых данных
    # vectorizer = TfidfVectorizer()
    # vectors = vectorizer.fit_transform(donations['description'])

    # # Обучение модели
    # similarity_matrix = cosine_similarity(vectors)

    # # Выдача рекомендаций
    # def get_recommendations(donation_id, num_recommendations):
    #     similarity_scores = similarity_matrix[donation_id]
    #     top_scores = sorted(enumerate(similarity_scores), key=lambda x: x[1], reverse=True)[1: num_recommendations + 1]
    #     top_ids = [i[0] for i in top_scores]
    #     return top_ids

    # # Пример использования
    # donation_id = int(input(': '))
    # num_recommendations = 34
    # recommendations_ai = get_recommendations(donation_id, num_recommendations)
    # print(recommendations_ai)

